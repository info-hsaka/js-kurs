"use strict";(self.webpackChunkjs_kurs=self.webpackChunkjs_kurs||[]).push([[73],{5891:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=i(4848),s=i(8453);const t={sidebar_position:1},d="Advanced Strings & Builtins",l={id:"part-three/builtins",title:"Advanced Strings & Builtins",description:"Template Strings",source:"@site/docs/part-three/builtins.md",sourceDirName:"part-three",slug:"/part-three/builtins",permalink:"/docs/part-three/builtins",draft:!1,unlisted:!1,editUrl:"https://github.com/info-hsaka/js-kurs/docs/part-three/builtins.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/docs/part-two/functions"},next:{title:"Arrays",permalink:"/docs/part-three/arrays"}},c={},o=[{value:"Template Strings",id:"template-strings",level:2},{value:"Special Characters &amp; Escaping",id:"special-characters--escaping",level:2},{value:"Builtin String Methods",id:"builtin-string-methods",level:2},{value:"<code>.startsWith(string)</code> (returnt Boolean)",id:"startswithstring-returnt-boolean",level:3},{value:"<code>.endsWith(string)</code> (returnt Boolean)",id:"endswithstring-returnt-boolean",level:3},{value:"<code>.includes(string)</code> (returnt Boolean)",id:"includesstring-returnt-boolean",level:3},{value:"<code>.indexOf(string)</code> (returnt Number)",id:"indexofstring-returnt-number",level:3},{value:"<code>.substring(number, number)</code> (returnt string)",id:"substringnumber-number-returnt-string",level:3},{value:"Builtin String Properties",id:"builtin-string-properties",level:2},{value:"<code>.length</code>",id:"length",level:3},{value:"Builtin <code>console</code> Methods",id:"builtin-console-methods",level:2},{value:"\xdcbung",id:"\xfcbung",level:2},{value:"Anrede k\xfcrzen",id:"anrede-k\xfcrzen",level:3},{value:"Entfernen von beliebigem String",id:"entfernen-von-beliebigem-string",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"advanced-strings--builtins",children:"Advanced Strings & Builtins"}),"\n",(0,r.jsx)(n.h2,{id:"template-strings",children:"Template Strings"}),"\n",(0,r.jsx)(n.p,{children:"Bisher haben wir Strings immer nur fest aufgeschrieben und ausgegeben. H\xe4ufig will man aber Strings dynamisch aus Daten zusammenbauen. Eventuell habt ihr das auch schon gedacht, wenn wir Sachen in der Konsole in mehreren Zeilen ausgegeben haben, die viel sch\xf6ner auf einer Zeile als ganzer Satz gewesen w\xe4ren."}),"\n",(0,r.jsx)(n.p,{children:"Um Strings dynamisch zusammenzubauen, gibt es sogenannte Template Strings. Template Strings werden wie normale Strings geschrieben, mit zwei \xc4nderungen:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Statt ",(0,r.jsx)(n.code,{children:'""'})," werden sie mit `` geschrieben"]}),"\n",(0,r.jsxs)(n.li,{children:["Mitten in dem String k\xf6nnen andere Werte eingesetzt werden, indem man sie mit ",(0,r.jsx)(n.code,{children:"${}"})," umschlie\xdft"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ein Beispiel:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const name = "Jane"\nconst goodMorning = `Guten Morgen ${name}, ich hoffe, du hast gut geschlafen`\n\nconsole.log(goodMorning)\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Guten Morgen Jane, ich hoffe, du hast gut geschlafen\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.p,{children:["Es k\xf6nnen dabei beliebig viele ",(0,r.jsx)(n.code,{children:"${}"})," vorkommen und in ihnen k\xf6nnen beliebige Werte stehen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const name = "Mischa"\nconst birthYear = 1993\nconst currentYear = 2024\n\nconsole.log(\n    `${name} ist im Jahr ${birthYear} geboren und ist damit im Jahr ${currentYear} ${currentYear - birthYear} Jahre alt`,\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Mischa ist im Jahr 1993 geboren und ist damit im Jahr 2024 31 Jahre alt,\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsx)(n.p,{children:"Template Strings sind also eine Art, Strings zusammenbauen, indem man sie wie eine Art L\xfcckentext schreibt und beliebige Werte in die L\xfccken einsetzt."}),"\n",(0,r.jsx)(n.h2,{id:"special-characters--escaping",children:"Special Characters & Escaping"}),"\n",(0,r.jsx)(n.p,{children:"Es gibt ein paar besondere Zeichen, die ihr in eure Strings einbauen k\xf6nnt:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\n"})," f\xfcr einen Zeilenumbruch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'\\"'})," f\xfcr ein ",(0,r.jsx)(n.code,{children:'"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\\\"})," f\xfcr ein ",(0,r.jsx)(n.code,{children:"\\"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log('Was ist gr\xfcn und kreist um die Erde?\\nEin \"Salatelit\".')\n"})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Was ist gr\xfcn und kreist um die Erde?\nEin "Salatelit".\n'})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsx)(n.h2,{id:"builtin-string-methods",children:"Builtin String Methods"}),"\n",(0,r.jsxs)(n.p,{children:["In Javascript gibt es eine ganze Menge sogenannter builtin Methods. Einee Method ist eine spezielle Art einer Funktion, die auf einem Wert liegt und auf diesen zugreift. Das klingt sehr abstrakt, hei\xdft aber nur, dass man auf manchen Werten mit einem ",(0,r.jsx)(n.code,{children:"."})," getrennt auf bestimmte n\xfctzliche Dinge zugreifen kann:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Funktion die zur\xfcckgibt, ob beide \xfcbergebenen Heldennamen mit "Green" anfangen\nfunction bothHeroesAreGreen(firstHero, secondHero) {\n    const firstGreen = firstHero.startsWith("Green")\n    const secondGreen = secondHero.startsWith("Green")\n\n    return firstGreen & secondGreen\n}\n\nconsole.log(bothHeroesAreGreen("Green Lantern", "Green Hulk")\nconsole.log(bothHeroesAreGreen("Thor", "Green Hulk")\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"true\nfalse\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.h3,{id:"startswithstring-returnt-boolean",children:[(0,r.jsx)(n.code,{children:".startsWith(string)"})," (returnt Boolean)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".startsWith"})," ist eine builtin Methode auf Strings, welche einen anderen String annimmt und zur\xfcckgibt, ob der String auf dem man sie aufgerufen hat mit dem \xfcbergebenen String beginnt oder nicht."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Black Widow".startsWith("Black"))\nconsole.log("Spider Man".startsWith("Ven"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"true\nfalse\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.h3,{id:"endswithstring-returnt-boolean",children:[(0,r.jsx)(n.code,{children:".endsWith(string)"})," (returnt Boolean)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".endsWith"})," ist das Gegenst\xfcck zu ",(0,r.jsx)(n.code,{children:"startsWith"}),", nur, dass das Ende des Strings gepr\xfcft wird."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Thor".endsWith("or"))\nconsole.log("Starlord".endsWith("Star"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"true\nfalse\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"includesstring-returnt-boolean",children:[(0,r.jsx)(n.code,{children:".includes(string)"})," (returnt Boolean)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".includes"})," pr\xfcft, ob der \xfcbergebene String irgendwo im String auf dem aufgerufen wurde enthalten ist."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Loki".includes("ok"))\nconsole.log("Groot".includes("or"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"true\nfalse\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.h3,{id:"indexofstring-returnt-number",children:[(0,r.jsx)(n.code,{children:".indexOf(string)"})," (returnt Number)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".indexOf"})," sucht \xe4hnlich wie ",(0,r.jsx)(n.code,{children:".includes"})," nach dem \xfcbergebenen String. Falls es ihn findet, gibt es zur\xfcck, beim wievielten Zeichen er gefunden wurde (die Z\xe4hlung beginnt dabei mit ",(0,r.jsx)(n.code,{children:"0"}),"). Wenn er nicht gefunden wird, wird ",(0,r.jsx)(n.code,{children:"-1"})," zur\xfcckgegeben."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Black Panther".indexOf("ack"))\nconsole.log("Jessica Jones".includes("Jess"))\nconsole.log("Captain Marvel".includes("asdf"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2\n0\n-1\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.h3,{id:"substringnumber-number-returnt-string",children:[(0,r.jsx)(n.code,{children:".substring(number, number)"})," (returnt string)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".substring"})," erwartet eine Startstelle und eine Endstelle. Es schneidet dann den angegebenen Ausschnitt aus dem String auf dem es aufgerufen wird aus und gibt den ausgeschnittetnen String zur\xfcck. Die Stellen werden dabei als Zahl angegeben, die Z\xe4hlung startet mit 0."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Iron Man".substring(0, 4))\nconsole.log("Wolverine".substring(2, 7))\nconsole.log("Captain America".substring(6, 10))\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Iron\nlveri\nn Am\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["Die Stellenangaben die ",(0,r.jsx)(n.code,{children:".substring"})," erwartet sind verhalten sich jeweils leicht anders - die Startangabe ist inklusiv, das hei\xdft das Zeichen an der Stelle ist das erste Zeichen im ausgeschnittenen Wert. Das Zeichen an der Endangabe ist ",(0,r.jsx)(n.strong,{children:"nicht"})," das letzte Zeichen, sondern das erste, das fehlt."]}),(0,r.jsxs)(n.p,{children:["In anderen Worten: ",(0,r.jsx)(n.code,{children:".substring(1, 4)"})," hei\xdft ",(0,r.jsx)(n.code,{children:"nimm die Zeichen von inklusive Stelle 1 bis exklusive Stelle 4"})," oder ",(0,r.jsx)(n.code,{children:"nimm die Zeichen an Stelle 1, 2 und 3"})]})]}),"\n",(0,r.jsx)(n.h2,{id:"builtin-string-properties",children:"Builtin String Properties"}),"\n",(0,r.jsx)(n.p,{children:"Zus\xe4tzlich zu builtin Methods gibt es auch noch sogenannte builtin Properties. Diese funktionieren genauso, sind aber keine Funktionen sondern direkt feste Werte."}),"\n",(0,r.jsx)(n.h3,{id:"length",children:(0,r.jsx)(n.code,{children:".length"})}),"\n",(0,r.jsxs)(n.p,{children:["Auf Strings gibt es die ",(0,r.jsx)(n.code,{children:".length"})," Property, welche die L\xe4nge des Strings als Zahl enth\xe4lt:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.log("Ant Man".length)\nconsole.log("".length)\nconsole.log("Hessische Sch\xfclerakademie".length)\n'})}),"\n",(0,r.jsx)(n.p,{children:"gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"7\n0\n15\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.h2,{id:"builtin-console-methods",children:["Builtin ",(0,r.jsx)(n.code,{children:"console"})," Methods"]}),"\n",(0,r.jsxs)(n.p,{children:["Wir haben bisher h\xe4ufig ",(0,r.jsx)(n.code,{children:"console.log"})," benutzt. Jetzt wissen wir ein wenig mehr dar\xfcber, was das ist - ",(0,r.jsx)(n.code,{children:"console"})," ist ein immer global vorhandener Wert der die Konsole repr\xe4sentiert, in der das Programm l\xe4uft. ",(0,r.jsx)(n.code,{children:"console"})," hat mehrere builtin Methods, under andere. ",(0,r.jsx)(n.code,{children:".log"}),", welche wir f\xfcr unsere Programme nutzen um Ausgaben zu erzeugen. Es gibt auch noch einige andere builtins auf ",(0,r.jsx)(n.code,{children:"console"}),", welche aber f\xfcr unseren Kurs erstmal noch nicht relevant sind."]}),"\n",(0,r.jsx)(n.h2,{id:"\xfcbung",children:"\xdcbung"}),"\n",(0,r.jsx)(n.h3,{id:"anrede-k\xfcrzen",children:"Anrede k\xfcrzen"}),"\n",(0,r.jsxs)(n.p,{children:["Schreibe eine Funktion ",(0,r.jsx)(n.code,{children:"removeSalutation(name)"}),' und exportiere sie. Sie soll aus einem vollen Namen die Anrede wegk\xfcrzen und das Ergebnis returnen. Das hei\xdft, dass deine Funktion einen String bekommt und falls dieser mit "Hr. " oder "Fr. " anf\xe4ngt, ssoll diese Anrede weggek\xfcrzt werden, so dass nur der Name selbst \xfcbrig bleibt. Falls nicht, soll der String unber\xfchrt returnt werden. Deine Funktion sollte sich so verhalten:']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Fr. Black Widow"'})," wird zu ",(0,r.jsx)(n.code,{children:'"Black Widow"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Hr. Hulk"'})," wird zu ",(0,r.jsx)(n.code,{children:'"Hulk"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Thor"'})," wird zu ",(0,r.jsx)(n.code,{children:'"Thor"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"entfernen-von-beliebigem-string",children:"Entfernen von beliebigem String"}),"\n",(0,r.jsxs)(n.p,{children:["Schreibe eine exportierte Funktion ",(0,r.jsx)(n.code,{children:"removeString(subject, needle)"}),", welche zwei Strings erwartet. Sie soll im ersten \xfcbergebenen String alle Vorkommnisse des zweite \xfcbergebenen Strings entfernen und den resultierenden String zur\xfcckgeben. ",(0,r.jsx)(n.strong,{children:"Benutze dabei nur die auf dieser Seite beschriebenen builtins"}),". Deine Funktion sollte sich folgenderma\xdfen verhalten:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'("FooBarFoo", "Foo")'})," wird zu ",(0,r.jsx)(n.code,{children:'"Bar"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'("Man darf auf der Akademie nicht Geschi sagen", "Geschi")'})," wird zu ",(0,r.jsx)(n.code,{children:'"Man darf auf der Akademie nicht  sagen"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'("Info ist der beste Kurs", "Mathe")'})," wird zu ",(0,r.jsx)(n.code,{children:'"Info ist der beste Kurs"'})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);