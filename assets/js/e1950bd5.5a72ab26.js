"use strict";(self.webpackChunkjs_kurs=self.webpackChunkjs_kurs||[]).push([[960],{9415:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(4848),i=r(8453);const t={sidebar_position:3},a="Objects",o={id:"part-three/objects",title:"Objects",description:"Der letzte composite Datentyp den wir uns anschauen sind Objekte / Objects.",source:"@site/docs/part-three/objects.md",sourceDirName:"part-three",slug:"/part-three/objects",permalink:"/docs/part-three/objects",draft:!1,unlisted:!1,editUrl:"https://github.com/info-hsaka/js-kurs/docs/part-three/objects.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/docs/part-three/arrays"}},l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Mutation",id:"mutation",level:2},{value:"Composition",id:"composition",level:2},{value:"\xdcbung",id:"\xfcbung",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"objects",children:"Objects"}),"\n",(0,s.jsx)(n.p,{children:"Der letzte composite Datentyp den wir uns anschauen sind Objekte / Objects."}),"\n",(0,s.jsx)(n.p,{children:"Bisher konnten wir in Variablen oder in Arrays immer nur einzelne Strings, Numbers oder Booleans benutzen. Manchmal m\xf6chte man aber mehrere solcher Werte als ein Paket behandeln. Stellt euch vor, ihr wollt Daten \xfcber eine Person in Variablen speichern: ihr Alter, ihren Namen und ihre Gr\xf6\xdfe in cm. Bisher m\xfcssten wir das so tun:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const age = 42\nconst name = "Lara Smith"\nconst height = 162\n'})}),"\n",(0,s.jsx)(n.p,{children:"Wenn wir jetzt mehrere solcher Personen abspeichern wollen und zB. eine Funktion schreiben, die etwas mit so einer Person macht, braucht es viele Variablen und die Funktion mehrere Parameter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const laraAge = 42\nconst laraName = "Lara Smith"\nconst laraHeight = 162\n\nconst johnAge = 37\nconst johnName = "John Miller"\nconst johnHeight = 176\n\nfunction logPerson(age, name, height) {\n    console.log(`${name} ist ${age} Jahre alt und ${height}cm gro\xdf`)\n}\n\nlogPerson(laraAge, laraName, laraHeight)\nlogPerson(johnAge, johnName, johnHeight)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Das wird schnell un\xfcbersichtlich. Man muss im Kopf behalten, dass die drei verschiedenen Variablen jeweils zusammengeh\xf6ren und in welcher Reihenfolge sie an die Funktion \xfcbergeben werden m\xfcssen."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.p,{children:'F\xfcr solche F\xe4lle, in denen mehrere Werte zusammengeh\xf6ren und eigentlich "eine Sache" sind, gibt es Objekte. Objekte erlauben es, beliebig viele Werte zu einem Wert zusammenzufassen:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const person = {\n    name: "Lara Smith",\n    age: 42,\n    height: 162,\n}\n\nconsole.log(person.name)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Lara\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsxs)(n.p,{children:["Ein Objekt besteht aus beliebig vielen sogenannten Felder / Fields. Ein Feld hat einen Namen und einen Wert (ein bisschen wie eine Variable). Man schreibt ein Objekt zwischen geschwungenen Klammern ",(0,s.jsx)(n.code,{children:"{}"})," mit den Feldnamen jeweils vor einem Doppelpunkt und dem Wert des Feldes nach dem Doppelpunkt ",(0,s.jsx)(n.code,{children:"<name>: <value>"}),". Felder werden mit Kommas ",(0,s.jsx)(n.code,{children:","})," getrennt."]}),"\n",(0,s.jsx)(n.admonition,{title:"Geschwungene Klammern",type:"caution",children:(0,s.jsxs)(n.p,{children:["Bisher haben geschwungene Klammern ",(0,s.jsx)(n.code,{children:"{}"})," immer Codebl\xf6cke markiert, die irgendwie ausgef\xfchrt werden sollen und einen lokalen Scope haben. Die geschwungenen Klammern um Objekte tun das nicht - sie beschreiben - \xe4hnlich wie die eckigen Klammern ",(0,s.jsx)(n.code,{children:"[]"})," um Arrays - nur einen Wert."]})}),"\n",(0,s.jsx)(n.p,{children:"Ein Objekt ist ein normaler Wert - das bedeutet, dass wir sie in Variablen abpseichern, an Funktionen \xfcbergeben oder in Arrays packen k\xf6nnen. Den Code von oben k\xf6nnten wir jetzt also folgenderma\xdfen schreiben:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const lara = {\n    age: 42,\n    name: "Lara Smith",\n    height: 162,\n}\nconst john = {\n    age: 37,\n    name: "John Miller",\n    height: 176,\n}\n\nfunction logPerson(person) {\n    console.log(\n        `${person.name} ist ${person.age} Jahre alt und ${person.height}cm gro\xdf`,\n    )\n}\n\nlogPerson(lara)\nlogPerson(john)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Das liest sich deutlich \xfcbersichtlicher, da wir die Personen jeweils als einzelne Werte behandeln k\xf6nnen. Die Feldnamen helfen zus\xe4tzlich unseren Code zu strukturieren."}),"\n",(0,s.jsx)(n.h2,{id:"mutation",children:"Mutation"}),"\n",(0,s.jsxs)(n.p,{children:["Mit der ",(0,s.jsx)(n.code,{children:"."})," Notation l\xe4sst sich ein Feld eines Objekts auch auf einen neuen Wert setzen oder ein komplett neues Feld hinzuf\xfcgen:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'let pet = { name: "Ryu", age: 2 }\n\npet.age = 17\npet.kind = "Hund"\n\nconsole.log(`${pet.name} ist ein ${pet.kind} und ist ${pet.age} Jahre alt`)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ryu ist ein Hund und ist 3 Jahre alt\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Es ist auch m\xf6glich, ein Feld zu beschreiben, dessen Name zB. in einer Variable enthalten ist. Daf\xfcr wird dann die ",(0,s.jsx)(n.code,{children:"[]"})," Notation benutzt - \xe4hnlich wie bei Arrays, nur mit einem String statt einer Number innerhalb der ",(0,s.jsx)(n.code,{children:"[]"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'let person = { name: "Taylor Swift" }\nconst foo = "age"\n\nperson[foo] = 34\nperson["job"] = "Musikerin"\n\nconsole.log(\n    `${person["name"]} ist ${person.age} Jahre alt und eine professionelle ${person.job}`,\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'person["job"]'})," ist \xe4quivalent zu ",(0,s.jsx)(n.code,{children:"person.job"})," - sowohl lesend als auch schreibend."]}),"\n",(0,s.jsx)(n.h2,{id:"composition",children:"Composition"}),"\n",(0,s.jsx)(n.p,{children:"\xc4hnlich wie bei Arrays, sind Objekte vor allem dann m\xe4chtig, wenn man sie mit anderen Konstrukten kombiniert. Denn auch die Felder von Objekten k\xf6nnen beliebige Werte sein - zum Beispiel andere Objekte oder Arrays. Dadurch lassen sich gro\xdfe zusammengeh\xf6rende Datenstrukturen in einem einzigen Wert zusammenfassen:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const course = {\n    teachers: [\n        { name: "Hilmar", age: 30 },\n        { name: "Bene", age: 29 },\n        { name: "Hilmar", age: 28 },\n        { name: "Toby", age: 24 },\n    ],\n    headTeachers: [\n        { name: "Mischa", age: 30 },\n        { name: "Leon", age: 30 },\n    ],\n    numberOfMembers: 11,\n    topic: "Turn Based Game Development",\n    isBestKurs: true,\n    timespan: {\n        from: "11.08.2024",\n        to: "23.08.2024",\n    },\n}\n\nconsole.log(\n    `Der Kurs hat das Thema "${course.topic}", startet am ${course.timespan.from} und hat ${course.numberOfMembers} Sch\xfcler:innen.\\nEr hat ${course.teachers.length} Betreuer und ${course.headTeachers.length} Kursleiter.`,\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Der Kurs hat das Thema "Turn Based Game Development", startet am 11.08.2024 und hat 11 Sch\xfcler:innen.\nEr hat 4 Betreuer und 2 Kursleiter.\n'})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.p,{children:"Alle Apps und Seiten die ihr jeden Tag verwendet verpacken ihre Daten in gro\xdfe Objekte mit vielen Unterobjekten und Arrays, schicken diese Objekte durch die Gegend oder speichern sie. Objekte sind der Kernmechanismus um Daten zu strukturieren."}),"\n",(0,s.jsx)(n.h2,{id:"\xfcbung",children:"\xdcbung"}),"\n",(0,s.jsxs)(n.p,{children:["Schreibe eine exportierte Funkion ",(0,s.jsx)(n.code,{children:"analyzeGrades(report)"}),", welche einen Array aus Objekten, welche Schulf\xe4cher mit Noten auf einem Zeugnis repr\xe4sentiert, entgegennimmt und ein Objekt mit einer Zusammenfassung des Zeugnisses zur\xfcckgibt."]}),"\n",(0,s.jsx)(n.p,{children:"Nimm an, dass die Objekte im Array den die Funktion annimmt, folgendes Format haben:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    // String der das Fach angibt\n    subject: "Deutsch",\n    // Zahl die die Note angibt (2.3 = 2- , 1.7 = 2+ , 2.0 = 2)\n    grade: 2.3,\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Gib ein Objekt im folgenden Format zur\xfcck:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    // Durchschnittsnote aller F\xe4cher\n    averageGrade: 2.43,\n    // Bestes Fach\n    bestSubject: {\n        subject: "Deutsch",\n        grade: 1.7,\n    },\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);