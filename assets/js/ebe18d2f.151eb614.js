"use strict";(self.webpackChunkjs_kurs=self.webpackChunkjs_kurs||[]).push([[132],{5409:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var r=i(4848),s=i(8453);i(6540),i(2303);const l={sidebar_position:3},d="Loops",o={id:"part-two/loops",title:"Loops",description:"Bisher sind unsere Programme geradlinig von oben nach unten durchgelaufen. Manchmal m\xf6chte man in einem Programm aber den selben Code h\xe4ufig hintereinander ausf\xfchren. Daf\xfcr gibt es sogenannte Loops (Schleifen).",source:"@site/docs/part-two/loops.md",sourceDirName:"part-two",slug:"/part-two/loops",permalink:"/js-kurs/docs/part-two/loops",draft:!1,unlisted:!1,editUrl:"https://github.com/info-hsaka/js-kurs/docs/part-two/loops.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Conditionals",permalink:"/js-kurs/docs/part-two/conditionals"},next:{title:"Scopes",permalink:"/js-kurs/docs/part-two/scopes"}},t={},a=[{value:"<code>while</code> Loops",id:"while-loops",level:2},{value:"<code>break</code> &amp; <code>continue</code>",id:"break--continue",level:2},{value:"\xdcbung",id:"\xfcbung",level:2},{value:"Collatz-Folge",id:"collatz-folge",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"loops",children:"Loops"}),"\n",(0,r.jsx)(n.p,{children:"Bisher sind unsere Programme geradlinig von oben nach unten durchgelaufen. Manchmal m\xf6chte man in einem Programm aber den selben Code h\xe4ufig hintereinander ausf\xfchren. Daf\xfcr gibt es sogenannte Loops (Schleifen)."}),"\n",(0,r.jsxs)(n.h2,{id:"while-loops",children:[(0,r.jsx)(n.code,{children:"while"})," Loops"]}),"\n",(0,r.jsxs)(n.p,{children:["Mit einem ",(0,r.jsx)(n.code,{children:"while"})," Loop k\xf6nnen wir ein St\xfcck Code ausf\xfchren wenn eine Bedingung gilt - genau wie mit einem ",(0,r.jsx)(n.code,{children:"if"}),". Allerdings f\xfchrt ",(0,r.jsx)(n.code,{children:"while"})," den Code immer und immer wieder aus - solange, bis die Bedingung nicht mehr ",(0,r.jsx)(n.code,{children:"true"})," ist. Ein Beispiel:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let number = 1\n\nwhile (number <= 100) {\n    console.log(number)\n\n    number = number + 1\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"dieses Programm gibt die Zahlen von 0 bis 100 aufsteigend in die Konsole aus."}),"\n",(0,r.jsxs)(n.admonition,{title:"Infinite Loops",type:"caution",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"while"})," f\xfchrt Code stumpf so lange aus, bis die Bedingung nicht mehr gilt."]}),(0,r.jsxs)(n.p,{children:["Das bedeutet, dass ",(0,r.jsx)(n.code,{children:"while"})," ",(0,r.jsx)(n.strong,{children:"nie aufh\xf6rt"})," Code zu wiederholen, wenn der wiederholte Code nicht irgendwann daf\xfcr sorgt, dass die Bedingung ",(0,r.jsx)(n.code,{children:"false"})," wird."]}),(0,r.jsxs)(n.p,{children:["Wenn wir zum Beispiel in unserem Beispiel oben das ",(0,r.jsx)(n.code,{children:"number = number + 1"})," vergessen h\xe4tten, h\xe4tten wir eine unendliche Schleife geschrieben:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let number = 1\n\n// Diese Schleife wird f\xfcr immer immer wieder 1 in die Konsole schreiben\nwhile (number <= 100) {\n    console.log(number)\n}\n"})})]}),"\n",(0,r.jsx)(n.p,{children:"Man liest allgemein"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"while (A) {\n    B\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'als "Solange A gilt, mach immer wieder B".'}),"\n",(0,r.jsxs)(n.h2,{id:"break--continue",children:[(0,r.jsx)(n.code,{children:"break"})," & ",(0,r.jsx)(n.code,{children:"continue"})]}),"\n",(0,r.jsxs)(n.p,{children:["Im Bezug auf Loops gibt es zwei weitere n\xfctzliche Statements, welche innerhalb (also im Code zwischen den ",(0,r.jsx)(n.code,{children:"{}"}),") von Loops benutzt werden k\xf6nnen:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"break"})," bricht die komplette Schleife sofort ab - das hei\xdft dass die aktuelle Wiederholung abgebrochen wird und danach auch keine weitere Wiederholung folgt. Der Code nach der Schleife wird regul\xe4r weiter ausgef\xfchrt:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let number = 0\n\nwhile (number < 100) {\n    number = number + 1\n\n    if (number > 3) {\n        // break springt von hier...\n        break\n    }\n\n    console.log(number)\n}\n// ...hierher\n\nconsole.log("Fertig!")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dieses Programm gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1\n2\n3\nFertig!\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsxs)(n.p,{children:["Das ",(0,r.jsx)(n.code,{children:"continue"}),' Statement ist \xe4hnlich. Allerdings bricht es nur die aktuelle Schleifenwiederholung ab, nicht die gessamte Schleife. Es "springt" sozusagen direkt zur n\xe4chsten Schleifenwiederholung:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let number = 0\n\nwhile (number < 10) {\n    number = number + 1\n\n    console.log(number)\n\n    // Falls number gerade ist, spring zum n\xe4chsten Durchlauf\n    if (number % 2 == 0) {\n        continue\n    }\n\n    console.log("ist ungerade")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dieses Programm gibt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1\nist ungerade\n2\n3\nist ungerade\n4\n5\nist ungerade\n6\n7\nist ungerade\n8\n9\nist ungerade\n"})}),"\n",(0,r.jsx)(n.p,{children:"aus."}),"\n",(0,r.jsx)(n.h2,{id:"\xfcbung",children:"\xdcbung"}),"\n",(0,r.jsx)(n.h3,{id:"collatz-folge",children:"Collatz-Folge"}),"\n",(0,r.jsx)(n.p,{children:"In der Mathematik gibt es die sogenannte Collatz-Folge. Um sie zu bilden, startet man mit einer beliebigen positiven ganzen Zahl. Dann wiederholt man die folgenden Schritte immer wieder:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Wenn die Zahl gerade ist, wird sie halbiert"}),"\n",(0,r.jsx)(n.li,{children:"Wenn die Zahl ungerade ist, wird sie verdreifacht und dann 1 addiert"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Wen man zum Beispiel mit der Zahl 5 anf\xe4ngt ergibt sich:"}),"\n",(0,r.jsx)(n.p,{children:"5, 16, 8, 4, 2, 1, 4, 2, 1, 4, 2, 1,...."}),"\n",(0,r.jsx)(n.p,{children:"Sobald 1, 4 oder 2 erreicht sind, wiederholt sich die 4, 2, 1 Folge unendlich weiter."}),"\n",(0,r.jsx)(n.p,{children:"Schreibe ein Programm, welches die Collatz-Folge angefangen mit der Zahl 123 ausgibt und aufh\xf6rt, sobald die unendlich wiederholende 4, 2, 1 Folge erreicht ist."}),"\n",(0,r.jsx)(n.admonition,{title:"L\xf6sungshinweis",type:"info",children:(0,r.jsxs)(n.p,{children:["Die gr\xf6\xdfte Zahl die dein Programm auf dem Weg ausgeben sollte ist ",(0,r.jsx)(n.code,{children:"628"})]})}),"\n",(0,r.jsx)(n.admonition,{title:"Trivia",type:"note",children:(0,r.jsx)(n.p,{children:"Bis heute wird zwar vermutet, dass jede ganze positive Zahl irgendwann in der 4, 2, 1 Folge landet, bewiesen ist es aber noch nicht. Mit Computerprogrammen wie dem, das du gerade geschrieben hast, hat man allerdings schon sehr sehr viele Zahlen ausprobiert und noch kein Gegenbeispiel gefunden."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var r=i(6540);const s={},l=r.createContext(s);function d(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);