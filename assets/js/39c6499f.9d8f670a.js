"use strict";(self.webpackChunkjs_kurs=self.webpackChunkjs_kurs||[]).push([[868],{8533:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=r(4848),i=r(8453);const t={sidebar_position:2},l="Arrays",d={id:"part-three/arrays",title:"Arrays",description:"Biser haben wir nur mit Werten von so genannten primitiven Datentypen (Strings, Numbers, Booleans) gearbeitet. Es gibt noch eine weitere Art Datentypen: composite Typen.",source:"@site/docs/part-three/arrays.md",sourceDirName:"part-three",slug:"/part-three/arrays",permalink:"/js-kurs/docs/part-three/arrays",draft:!1,unlisted:!1,editUrl:"https://github.com/info-hsaka/js-kurs/docs/part-three/arrays.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Advanced Strings & Builtins",permalink:"/js-kurs/docs/part-three/builtins"},next:{title:"Objects",permalink:"/js-kurs/docs/part-three/objects"}},a={},c=[{value:"Basics",id:"basics",level:2},{value:"Index Access",id:"index-access",level:2},{value:"Index Assignment",id:"index-assignment",level:2},{value:"Array Builtins",id:"array-builtins",level:2},{value:"String-likes",id:"string-likes",level:3},{value:"<code>.pop</code> / <code>.shift</code>",id:"pop--shift",level:3},{value:"<code>.push</code> / <code>.unshift</code>",id:"push--unshift",level:3},{value:"Beliebige Werte",id:"beliebige-werte",level:2},{value:"Zwischen\xfcbung",id:"zwischen\xfcbung",level:2},{value:"<code>for of</code> Loops",id:"for-of-loops",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsx)(n.p,{children:"Biser haben wir nur mit Werten von so genannten primitiven Datentypen (Strings, Numbers, Booleans) gearbeitet. Es gibt noch eine weitere Art Datentypen: composite Typen."}),"\n",(0,s.jsx)(n.p,{children:"Der erste comsposite Datentyp den wir uns anschauen ist Array."}),"\n",(0,s.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,s.jsxs)(n.p,{children:["Ein Array ist ein Wert, der eine beliebig lange Liste von Werten enth\xe4lt. Ein Array wird mit eckigen ",(0,s.jsx)(n.code,{children:"[]"})," Klammern mit den Werten die er enth\xe4lt innerhalb der Klammern mit Kommas getrennt geschrieben:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const fruits = ["Apfel", "Orange", "Banane"]\nconst ages = [22, 90, 18, 7, 45]\nconst heroes = ["Hulk", "Thor"]\n\nconsole.log(fruits)\nconsole.log(cities)\nconsole.log(heroes)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"['Apfel', 'Orange', 'Banane']\n[22, 90, 18, 7, 45]\n['Hulk', 'Thor']\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.p,{children:"Der Array selbst ist nur ein normaler Javascript Wert - wir k\xf6nnen ihn in einer Variable speichern, ihn als Parameter an Funktionen \xfcbergeben, aus Funktionen returnen etc."}),"\n",(0,s.jsx)(n.h2,{id:"index-access",children:"Index Access"}),"\n",(0,s.jsxs)(n.p,{children:["Um auf einen Wert innerhalb eines Arrays zuzugreifen, schreiben wir eine Zahl - den sogenannten Index - nach dem Array in eckige Klammern ",(0,s.jsx)(n.code,{children:"[]"})," und erhalten so das Element im Array an der Stelle des Index. Arrays fangen im Gegensatz zu Menschen ",(0,s.jsx)(n.strong,{children:"nicht"})," bei 1 an wenn sie z\xe4hlen sondern bei 0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const colors = ["Blau", "Gr\xfcn", "Orange", "Violett"]\n\nconsole.log(colors[2])\nconsole.log(colors[0])\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Orange\nBlau\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsxs)(n.p,{children:["Wenn man auf einen Index zugreift, der au\xdferhalb des Arrrays liegt, erh\xe4lt man ",(0,s.jsx)(n.code,{children:"undefined"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const years = [2018, 2024, 1993]\n\nconst firstYear = years[0]\nconst tenthYear = years[9]\n\nconsole.log(firstYear)\nconsole.log(tenthYear)\n"})}),"\n",(0,s.jsx)(n.p,{children:"gibt."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"2018\nundefined\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.p,{children:"Mit einem Loop k\xf6nnten wir zum Beispiel alle Strings in einem Array in der Konsole ausgeben:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const drinks = ["Orangensaft", "Tee", "Kaffee"]\nconst drinksLength = 3\n\nlet index = 0\n\nwhile (index < drinksLength) {\n    const currentDrink = drinks[index]\n    console.log(currentDrink)\n\n    index = index + 1\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Orangensaft\nTee\nKaffee\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.h2,{id:"index-assignment",children:"Index Assignment"}),"\n",(0,s.jsx)(n.p,{children:"Die einzelnen Elemente eines Arrays k\xf6nnen nicht nur gelesen, sondern auch geschrieben werden:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'let courses = ["Geschichte", "Germanistik", "Physik", "Mathematik"]\n\nconsole.log(courses[1])\n\n// Mit der selben Notation mit der auf ein Element zugegriffen wird, kann es mit = auch beschrieben werden\ncourses[1] = "Informatik"\n\nconsole.log(courses[1])\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Germanistik\nInformatik\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.h2,{id:"array-builtins",children:"Array Builtins"}),"\n",(0,s.jsx)(n.p,{children:"Arrays haben \xe4hnlich wie Strings auch viele builtin Methoden und Properties."}),"\n",(0,s.jsx)(n.h3,{id:"string-likes",children:"String-likes"}),"\n",(0,s.jsx)(n.p,{children:"Einige davon hei\xdfen und funktionieren sogar genauso wie bei Strings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".length"})," ist eine Property und enth\xe4lt die Anzahl der Elemente des Arrays"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".includes"})," ist eine Funktion die einen beliebigen Wert erwartet und zur\xfcckgibt, ob dieser im Array enthalten ist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".indexOf"})," ist eine Funktion die einen beliebigen Wert erwartet und zur\xfcckgibt, wo im Array dieser Wert (zuerst) vorkommt und ",(0,s.jsx)(n.code,{children:"-1"})," falls dieser gar nicht vorkommt"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".slice"})," ist eine Funktion die zwei Zahlen (ein Start und ein Ende) erwartet und den entsprechenden Teil des Arrays als neuen Array zur\xfcckgibt (genau wie ",(0,s.jsx)(n.code,{children:".substring"})," auf Strings)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Arrays haben noch eine lange Liste weiterer builtin Methods. Ein paar davon wollen wir uns anschauen:"}),"\n",(0,s.jsxs)(n.h3,{id:"pop--shift",children:[(0,s.jsx)(n.code,{children:".pop"})," / ",(0,s.jsx)(n.code,{children:".shift"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".pop"})," entfernt das letzte Element des Arrays. ",(0,s.jsx)(n.code,{children:".unshift"})," ist das Gegenst\xfcck, welches das erste Element des Arrays entfernt."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const languages = ["Spanish", "Chinese", "Russian"]\nlanguages.pop()\nlanguages.unshift()\n\nconsole.log(languages)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["Chinese"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsxs)(n.h3,{id:"push--unshift",children:[(0,s.jsx)(n.code,{children:".push"})," / ",(0,s.jsx)(n.code,{children:".unshift"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".push"})," erwartet einen beliebigen Wert und f\xfcgt ihn an das Ende des Arrays an. ",(0,s.jsx)(n.code,{children:".unshift"})," tut das gleiche, aber f\xfcgt den Wert an den Anfang des Arrays ein:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const names = ["Leo"]\n\nnames.push("Ryu")\nnames.unshift("Neela")\n\nconsole.log(names)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["Neela", "Leon", "Ryu"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsx)(n.h2,{id:"beliebige-werte",children:"Beliebige Werte"}),"\n",(0,s.jsx)(n.p,{children:"Arrays k\xf6nnen beliebige Werte enthalten. Das bedeutet, dass Arrays auch andere Arrays enthalten k\xf6nnen. Ein Tic-Tac-Toe Spielfeld k\xf6nnte man zum Beispiel als Array mit drei Elementen von dem jedes wiederum selbst ein Array mit drei Elementen ist, welche die einzelnen Felder repr\xe4sentieren:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const ticTacToe = [\n    ["X", "O", " "],\n    [" ", "X", "O"],\n    [" ", "O", " "],\n]\n\nconst middle = ticTacToe[1][1]\n\nconsole.log(middle)\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"X\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ticTacToe[1][1]"})," sieht hier etwas magisch aus. Aber wenn wir uns Klammern vorstellen ",(0,s.jsx)(n.code,{children:"(ticTacToe[1])[1]"})," ist klarer, was hier passiert - der erste Zugriff auf ",(0,s.jsx)(n.code,{children:"ticTacToe[1] "})," ist wieder ein Array (n\xe4mlich die zweite Zeile des Spielfeldes), also k\xf6nnen wir wieder auf ein Element zugreifen - in dem Fall wieder mit ",(0,s.jsx)(n.code,{children:"[1]"})," auf das zweite (mittlere) Element."]}),"\n",(0,s.jsx)(n.h2,{id:"zwischen\xfcbung",children:"Zwischen\xfcbung"}),"\n",(0,s.jsxs)(n.p,{children:["Schreibe eine exportierte Funktion ",(0,s.jsx)(n.code,{children:"filterStrings(arr)"}),", die einen Array aus Strings erwartet und einen neuen Array aus Strings zur\xfcckgibt. Dieser neue Array aus Strings soll alle Strings des \xfcbergebenen Arrays enthalten, die mindestens 5 Zeichen lang sind ",(0,s.jsx)(n.strong,{children:"oder"}),' mit einem "S" starten - und zwar in umgedrehter Reihenfolge.']}),"\n",(0,s.jsxs)(n.p,{children:["Beispiel: ",(0,s.jsx)(n.code,{children:'["Kugelschreiber", "Salz", "Maus"]'})," wird zu ",(0,s.jsx)(n.code,{children:'["Salz", "Kugelschreiber"]'})]}),"\n",(0,s.jsxs)(n.h2,{id:"for-of-loops",children:[(0,s.jsx)(n.code,{children:"for of"})," Loops"]}),"\n",(0,s.jsxs)(n.p,{children:["Da man beim Programmieren sehr h\xe4ufig einen Loop schreiben muss, um irgendetwas mit jedem Element eines Arrays zu tun, gibt es hierf\xfcr eine spezielle Kurzform - den ",(0,s.jsx)(n.code,{children:"for of"})," Loop:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const devices = ["Laptop", "Keyboard", "Mouse", "Headphones"]\n\nfor (const dev of devices) {\n    console.log(dev)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"gibt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Laptop\nKeyboard\nMouse\nHeadphones\n"})}),"\n",(0,s.jsx)(n.p,{children:"aus."}),"\n",(0,s.jsxs)(n.p,{children:["Ein ",(0,s.jsx)(n.code,{children:"for of"})," Loop wird allgmein ",(0,s.jsx)(n.code,{children:"for (const <name> of <array>) { <body> }"})," geschrieben, wobei ",(0,s.jsx)(n.code,{children:"<name>"})," der Name der neuen lokalen Variable ist, die automatisch pro Durchlauf das aktuelle Element des Arrays ",(0,s.jsx)(n.code,{children:"<array>"})," enth\xe4lt."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);